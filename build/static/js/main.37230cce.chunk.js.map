{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","createBoard","board","i","nrows","row","j","ncols","push","Math","random","chanceLightStartsOn","flipCellsAround","coord","_this$props","state","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","x","y","flipCell","win","every","cell","setState","hasWon","displayBoard","tableBoard","_loop","concat","src_Cell_0","key","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37230cce.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport \"./Cell.css\";\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    );\n  }\n}\n\nexport default Cell;","import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.3\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = { hasWon: false, board: this.createBoard() }\n  }\n\n  /* create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard = () => {\n    let board = [];\n    for (let i = 0; i < this.props.nrows; i++) {\n      let row = [];\n      for (let j = 0; j < this.props.ncols; j++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /* handle changing a cell: update board & determine if winner */\n\n  flipCellsAround = (coord) => {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [x, y] = coord.split(\"-\").map(Number);\n\n    function flipCell(x, y) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < nrows && y >= 0 && y < ncols) {\n        board[x][y] = !board[x][y];\n      }\n    }\n\n    flipCell(x, y);\n    flipCell(x, y + 1);\n    flipCell(x, y - 1);\n    flipCell(x - 1, y);\n    flipCell(x + 1, y);\n\n    let win = board.every(row => row.every(cell => cell === false));\n\n    this.setState({ board: board, hasWon: win });\n  }\n\n  displayBoard = () => {\n    let tableBoard = [];\n    for (let i = 0; i < this.props.nrows; i++) {\n      let row = [];\n      for (let j = 0; j < this.props.ncols; j++) {\n        let coord = `${i}-${j}`;\n        row.push(<Cell key={coord} isLit={this.state.board[i][j]}\n          flipCellsAroundMe={() => this.flipCellsAround(coord)} />);\n      }\n      tableBoard.push(<tr key={i}>{row}</tr>);\n    }\n    return tableBoard;\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.hasWon ? (\n          <div className=\"winner\">\n            <span className=\"neon-orange\">YOU</span>\n            <span className=\"neon-blue\">WIN!</span>\n          </div>\n        ) : (\n            <div>\n              <div className=\"Board-title\">\n                <div className=\"neon-orange\">Lights</div>\n                <div className=\"neon-blue\">Out</div>\n              </div>\n              <table className=\"Board\">\n                <tbody>{this.displayBoard()}</tbody>\n              </table>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}